{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { useThemeProps } from '@mui/material/styles';\nimport { Clock } from '../internals/components/icons';\nimport { useLocaleText, useUtils } from '../internals/hooks/useUtils';\nimport { parsePickerInputValue } from '../internals/utils/date-utils';\nexport function useTimePickerDefaultizedProps(props, name) {\n  var _themeProps$ampm;\n\n  // This is technically unsound if the type parameters appear in optional props.\n  // Optional props can be filled by `useThemeProps` with types that don't match the type parameters.\n  const themeProps = useThemeProps({\n    props,\n    name\n  });\n  const utils = useUtils();\n  const ampm = (_themeProps$ampm = themeProps.ampm) != null ? _themeProps$ampm : utils.is12HourCycleInCurrentLocale();\n  const localeText = useLocaleText();\n  const getOpenDialogAriaText = localeText.openTimePickerDialogue;\n  return _extends({\n    ampm,\n    openTo: 'hours',\n    views: ['hours', 'minutes'],\n    acceptRegex: ampm ? /[\\dapAP]/gi : /\\d/gi,\n    disableMaskedInput: false,\n    getOpenDialogAriaText,\n    inputFormat: ampm ? utils.formats.fullTime12h : utils.formats.fullTime24h\n  }, themeProps, {\n    components: _extends({\n      OpenPickerIcon: Clock\n    }, themeProps.components)\n  });\n}\nexport const timePickerValueManager = {\n  emptyValue: null,\n  parseInput: parsePickerInputValue,\n  getTodayValue: utils => utils.date(),\n  areValuesEqual: (utils, a, b) => utils.isEqual(a, b),\n  valueReducer: (utils, lastValidValue, newValue) => {\n    if (!lastValidValue || !utils.isValid(newValue)) {\n      return newValue;\n    }\n    return utils.mergeDateAndTime(lastValidValue, newValue);\n  }\n};","map":{"version":3,"names":["_extends","useThemeProps","Clock","useLocaleText","useUtils","parsePickerInputValue","useTimePickerDefaultizedProps","props","name","_themeProps$ampm","themeProps","utils","ampm","is12HourCycleInCurrentLocale","localeText","getOpenDialogAriaText","openTimePickerDialogue","openTo","views","acceptRegex","disableMaskedInput","inputFormat","formats","fullTime12h","fullTime24h","components","OpenPickerIcon","timePickerValueManager","emptyValue","parseInput","getTodayValue","date","areValuesEqual","a","b","isEqual","valueReducer","lastValidValue","newValue","isValid","mergeDateAndTime"],"sources":["/Users/taivo/Documents/Work/FreeC/Google Ads/FrontEnd/node_modules/@mui/x-date-pickers/TimePicker/shared.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { useThemeProps } from '@mui/material/styles';\nimport { Clock } from '../internals/components/icons';\nimport { useLocaleText, useUtils } from '../internals/hooks/useUtils';\nimport { parsePickerInputValue } from '../internals/utils/date-utils';\nexport function useTimePickerDefaultizedProps(props, name) {\n  var _themeProps$ampm;\n\n  // This is technically unsound if the type parameters appear in optional props.\n  // Optional props can be filled by `useThemeProps` with types that don't match the type parameters.\n  const themeProps = useThemeProps({\n    props,\n    name\n  });\n  const utils = useUtils();\n  const ampm = (_themeProps$ampm = themeProps.ampm) != null ? _themeProps$ampm : utils.is12HourCycleInCurrentLocale();\n  const localeText = useLocaleText();\n  const getOpenDialogAriaText = localeText.openTimePickerDialogue;\n  return _extends({\n    ampm,\n    openTo: 'hours',\n    views: ['hours', 'minutes'],\n    acceptRegex: ampm ? /[\\dapAP]/gi : /\\d/gi,\n    disableMaskedInput: false,\n    getOpenDialogAriaText,\n    inputFormat: ampm ? utils.formats.fullTime12h : utils.formats.fullTime24h\n  }, themeProps, {\n    components: _extends({\n      OpenPickerIcon: Clock\n    }, themeProps.components)\n  });\n}\nexport const timePickerValueManager = {\n  emptyValue: null,\n  parseInput: parsePickerInputValue,\n  getTodayValue: utils => utils.date(),\n  areValuesEqual: (utils, a, b) => utils.isEqual(a, b),\n  valueReducer: (utils, lastValidValue, newValue) => {\n    if (!lastValidValue || !utils.isValid(newValue)) {\n      return newValue;\n    }\n\n    return utils.mergeDateAndTime(lastValidValue, newValue);\n  }\n};"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,oCAAoC;AACzD,SAASC,aAAa,QAAQ,sBAAsB;AACpD,SAASC,KAAK,QAAQ,+BAA+B;AACrD,SAASC,aAAa,EAAEC,QAAQ,QAAQ,6BAA6B;AACrE,SAASC,qBAAqB,QAAQ,+BAA+B;AACrE,OAAO,SAASC,6BAA6BA,CAACC,KAAK,EAAEC,IAAI,EAAE;EACzD,IAAIC,gBAAgB;;EAEpB;EACA;EACA,MAAMC,UAAU,GAAGT,aAAa,CAAC;IAC/BM,KAAK;IACLC;EACF,CAAC,CAAC;EACF,MAAMG,KAAK,GAAGP,QAAQ,EAAE;EACxB,MAAMQ,IAAI,GAAG,CAACH,gBAAgB,GAAGC,UAAU,CAACE,IAAI,KAAK,IAAI,GAAGH,gBAAgB,GAAGE,KAAK,CAACE,4BAA4B,EAAE;EACnH,MAAMC,UAAU,GAAGX,aAAa,EAAE;EAClC,MAAMY,qBAAqB,GAAGD,UAAU,CAACE,sBAAsB;EAC/D,OAAOhB,QAAQ,CAAC;IACdY,IAAI;IACJK,MAAM,EAAE,OAAO;IACfC,KAAK,EAAE,CAAC,OAAO,EAAE,SAAS,CAAC;IAC3BC,WAAW,EAAEP,IAAI,GAAG,YAAY,GAAG,MAAM;IACzCQ,kBAAkB,EAAE,KAAK;IACzBL,qBAAqB;IACrBM,WAAW,EAAET,IAAI,GAAGD,KAAK,CAACW,OAAO,CAACC,WAAW,GAAGZ,KAAK,CAACW,OAAO,CAACE;EAChE,CAAC,EAAEd,UAAU,EAAE;IACbe,UAAU,EAAEzB,QAAQ,CAAC;MACnB0B,cAAc,EAAExB;IAClB,CAAC,EAAEQ,UAAU,CAACe,UAAU;EAC1B,CAAC,CAAC;AACJ;AACA,OAAO,MAAME,sBAAsB,GAAG;EACpCC,UAAU,EAAE,IAAI;EAChBC,UAAU,EAAExB,qBAAqB;EACjCyB,aAAa,EAAEnB,KAAK,IAAIA,KAAK,CAACoB,IAAI,EAAE;EACpCC,cAAc,EAAEA,CAACrB,KAAK,EAAEsB,CAAC,EAAEC,CAAC,KAAKvB,KAAK,CAACwB,OAAO,CAACF,CAAC,EAAEC,CAAC,CAAC;EACpDE,YAAY,EAAEA,CAACzB,KAAK,EAAE0B,cAAc,EAAEC,QAAQ,KAAK;IACjD,IAAI,CAACD,cAAc,IAAI,CAAC1B,KAAK,CAAC4B,OAAO,CAACD,QAAQ,CAAC,EAAE;MAC/C,OAAOA,QAAQ;IACjB;IAEA,OAAO3B,KAAK,CAAC6B,gBAAgB,CAACH,cAAc,EAAEC,QAAQ,CAAC;EACzD;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}